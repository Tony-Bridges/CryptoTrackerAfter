 def __init__(self,db_params, difficulty=2):
        self.chain = [self.create_genesis_block()]
        self.difficulty = difficulty
        self.pending_transactions = []
        self.timestamp = time.time()
        self.db_params = db_params
        
    def calculate_merkle_root(self, transactions):
        """Calculate the Merkle root of a list of transactions."""
        if not transactions:
            return None
        hashes = [hashlib.sha256(str(tx).encode()).hexdigest() for tx in transactions]
        while len(hashes) > 1:
            new_hashes = []
            for i in range(0, len(hashes), 2):
                if i + 1 < len(hashes):
                    combined_hash = hashlib.sha256(hashes[i] + hashes[i + 1]).hexdigest()
                    new_hashes.append(combined_hash)
                else:
                    new_hashes.append(hashes[i])
            hashes = new_hashes
        return hashes[0]    

    def create_genesis_block(self):
        """Create the first block in the chain (genesis block)."""
        return Block(0, datetime.datetime.now(), "Genesis Block", "0")

    def add_block(self, block):
        """Add a new block to the chain after mining."""
        if self.is_valid_block(block, self.chain[-1]):
            block.merlke_root = self.calculate_merkle_root(block.transactions)
            self.chain.append(block)
            self.pending_transactions = []

    def mine_block(self, miner_address):
        """Mine a new block with pending transactions."""
        previous_block = self.chain[-1]
        new_block = Block(
            index=len(self.chain),
            previous_hash=previous_block.hash,
            transactions=self.pending_transactions
        )
        new_block.mine(self.difficulty)
        self.add_block(new_block)

        # Reward the miner
        self.add_transaction({"from": "network", "to": miner_address, "amount": 10})

    def add_transaction(self, transaction):
        """Add a new transaction to the list of pending transactions."""
        self.pending_transactions.append(transaction)

    def is_valid_block(self, block, previous_block):
        """Check if a block is valid."""
        if previous_block.index + 1!= block.index:
            return False
        elif previous_block.hash!= block.previous_hash:
            return False
        elif not self.is_valid_proof(block, self.difficulty):
            return False
        return True

    def is_valid_proof(self, block, difficulty):
        """Check if a proof (hash) is valid based on the difficulty."""
        return block.hash.startswith("0" * difficulty)

    def is_chain_valid(self):
        """Check if the blockchain is valid."""
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            if not self.is_valid_block(current_block, previous_block):
                return False
        return True

    def display_chain(self):
        """Display the entire blockchain."""
        for block in self.chain:
            print(f"Index: {block.index}")
            print(f"Previous Hash: {block.previous_hash}")
            print(f"Transactions: {block.transactions}")
            print(f"Timestamp: {block.timestamp}")
            print(f"Nonce: {block.nonce}")
            print(f"Hash: {block.hash}")
            print("-" * 50)
    
    def save_block(self, block):
        """Saves a block to the database."""
        conn = psycopg2.connect(**self.db_params)
        cursor = conn.cursor()
        try:
            cursor.execute("""
                INSERT INTO blocks (block_height, timestamp, hash, miner_address, num_transactions)
                VALUES (%s, to_timestamp(%s), %s, %s, %s)
                RETURNING id
            """, (block.index, block.timestamp, block.hash, "miner_address", len(block.transactions)))
            block_id = cursor.fetchone()

            # Save transactions
            for transaction in block.transactions:
                cursor.execute("""
                    INSERT INTO transactions (hash, block_id, sender_address, receiver_address, amount, timestamp)
                    VALUES (%s, %s, %s, %s, %s, to_timestamp(%s))
                """, (hashlib.sha256(str(transaction).encode()).hexdigest(), block_id, transaction.get("from"), transaction.get("to"), transaction.get("amount"), block.timestamp))
        except Exception as e:
            print(f"Error saving block: {e}")
        conn.commit()
        conn.close()
